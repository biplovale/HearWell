#include "Volume.h"
#define window_size 10

int window[window_size] = {0};

void push(int val){
  int i = 0;
  for(i = 0; i < window_size; i++){
    window[i-1] = window[i];
  }
  window[window_size - 1] = val; 
}

int take_avg(){
  long sum = 0;
  int i = 0;
  for(i = 0; i < window_size; i++){
    sum += window[i];
  }
  return sum/window_size;
}

//Initial setup 
Volume vol;
int volumePot = A0;
int frequencyPot = A1;

//Helper function definations
int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum);

void setup() {
  vol.begin(); //default pin = D5; alternate = D6

  Serial.begin(9600);
}

void loop() {
  // the size of this array represents how many numbers will be used
  // to calculate the average
  int avg[10] = {0};
  
  int pos = 0;
  int newAvg = 0;
  long sum = 0.0;
  int len = sizeof(avg) / sizeof(int);
  int volRead = analogRead(volumePot);
  Serial.println(volRead);
  
  newAvg = movingAvg(avg, &sum, pos, len, volRead);
  Serial.print("The new average is ");
  Serial.println(newAvg);
  pos++;

  
// 
//  int cur_sample = 0;
//  cur_sample = analogRead(volumePot);
//  delayMicroseconds(300);
//  push(cur_sample);
//  Serial.println(take_avg());
//  
//  delay(1000);
// 
  
  
}

//Helper function implementation
int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
  //return the average
  return *ptrSum / len;
}
